// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Usando vari√°veis de ambiente do arquivo .env
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Verificar se as vari√°veis de ambiente est√£o definidas
if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  console.error('Erro: Vari√°veis de ambiente do Supabase n√£o est√£o definidas.');
  console.error('Certifique-se de que o arquivo .env existe e cont√©m VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY.');
}

console.log('üîß Supabase Client Configuration:');
console.log('URL:', SUPABASE_URL);
console.log('Anon Key:', SUPABASE_ANON_KEY ? 'Present' : 'Missing');

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL as string, 
  SUPABASE_ANON_KEY as string,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      flowType: 'implicit'
    },
    global: {
      headers: {
        'X-Client-Info': 'calma-portal'
      }
    },
    db: {
      schema: 'public'
    }
  }
);

// Enhanced auth logging
supabase.auth.onAuthStateChange((event, session) => {
  console.log('üîê Auth State Change:', event);
  console.log('üîê Session:', session ? {
    user_id: session.user.id,
    email: session.user.email,
    expires_at: session.expires_at,
    access_token: session.access_token ? 'Present' : 'Missing'
  } : 'No session');
});

// Log initial session
supabase.auth.getSession().then(({ data: { session } }) => {
  console.log('üîê Initial Session:', session ? {
    user_id: session.user.id,
    email: session.user.email,
    expires_at: session.expires_at
  } : 'No initial session');
});
